{"name":"slop_fork","tagline":"IRC bot","body":"slop\r\n\r\nAn IRC bot written in node. Features:\r\n\r\n+ Simple module system\r\n+ Loading / unloading modules dynamically in operation\r\n+ Extensive events, reasonable parsing\r\n+ Master privileges, autojoin, most options and modules you expect out of the box\r\n+ Extensive formatting for IRC output; bold, underline, foreground & background colors\r\n\r\n## Installation requirements\r\n\r\n+ **Node** [Link](http://nodejs.org/download/)\r\n\r\n## Running bot\r\n\r\n* Clone this repository:\r\n\r\n```code\r\ngit clone https://github.com/Ond/slop\r\n```\r\n\r\n* cd into directory and `npm install`\r\n\r\n```code\r\ncd pr0kbot;npm install ./\r\n```\r\n\r\n* Modify `config.json` to your desire. \r\n\r\n* Run slop:\r\n\r\n```code\r\nnode run\r\n```\r\n\r\nPass an argument to `run` for separate configuration file.\r\n\r\n## Configuration options\r\n\r\nModify configuration in `config.json`\r\n\r\n+ `network` Desired network, e.g. `irc.demo.null`\r\n+ `port` Port, e.g. `6667`\r\n+ `nick_name` Desired nick, e.g. `botnick`\r\n+ `user_name` Desired username, e.g. `botname`\r\n+ `real_name` Desired real name, e.g. `bot name`\r\n+ `autojoin` List of channels to autojoin, e.g. `[ '#mychannel' ]`\r\n+ `log` Whether or not to log input / output. Option may be boolean `true / false` or a string `in / out`\r\n+ `command_prefix` Defaults to `.`. This allows you to listen specifically for commands\r\n+ `masters` An array of bot masters. With default modules the master may load and unload modules, and ignore other users.\r\n\r\n## Commands\r\n\r\nThese commands exist for the bot:\r\n\r\n+ `connect` Connect to the network\r\n+ `write` Writes raw commands to the server\r\n+ `msg` Sends PRIVMSG to channel or user\r\n+ `notice` Sends NOTICE to channel or user\r\n+ `join` Joins channel\r\n+ `part` Parts channel\r\n+ `auth` Sends NICK / USER to server\r\n+ `identify` Identifies with NickServ\r\n+ `load` Use a module at the given path (Alias: use)\r\n+ `unload` Unload a module with provided name\r\n+ `termColor` Returns a term color or colorifies the second argument\r\n+ `color` Colors text for IRC output. Arguments are: text, foreground, background\r\n+ `format` First argument is options object. Accepts `style` `foreground` and `background`. Second argument is string\r\n\r\n## Events\r\n\r\nYou may listen for any of these events:\r\n\r\n+ `connect`\r\n+ `notice`\r\n+ `server notice`\r\n+ `channel notice`\r\n+ `join`\r\n+ `part`\r\n+ `quit`\r\n+ `names`\r\n+ `msg`\r\n+ `server msg`\r\n+ `channel msg`\r\n+ `mode`\r\n+ `channel mode`\r\n+ `user mode`\r\n+ `mute`\r\n+ `unmute`\r\n+ `inviteonly`\r\n+ `deinviteonly`\r\n+ `voice`\r\n+ `devoice`\r\n+ `halfop`\r\n+ `dehalfop`\r\n+ `op`\r\n+ `deop`\r\n+ `ban`\r\n+ `unban`\r\n\r\nYou may also listen for arbitrary modes with +mode / -mode, e.g. `+v`. The `msg` event consumes both channel and server messages. The `channel msg` event consumes only channel messages, and so forth. This rule apples to `msg`, `notice`, and `mode`. You may also listen for messages beginning with a command prefix. The default command prefix is `.` and it can be configured in `config.json`.\r\n\r\n## Event handlers\r\n\r\nThis is a standard event listener which captures the `join` event. This handler is called when a user joins a channel.\r\n\r\n```js\r\nhook('join', function(ev, res) {\r\n\r\n});\r\n```\r\n\r\nThe `ev` object contains information about the event. Not all events contain the same information. All events contain the following data properties:\r\n\r\n+ `from` An object containing `nick`, `host`, and `user` of the person who joined\r\n+ `params` An array containing event parameters, in this case it is empty\r\n+ `val` The raw suffix string ,or in IRC terms the portion of the message occuring after the last colon separator.\r\n+ `raw` The complete, unparsed line received from IRC server\r\n\r\nCommand listeners, e.g. `.google` or `.weather` will receive a `cmd` property which has the following attributes:\r\n\r\n+ `name` The name of the command\r\n+ `argv` An array of arguments to the command\r\n\r\n`res` is a shortcut response function. Instead of parsing sender / channel manually, it will determine automatically how to respond (to a user, channel, etc.). Simply call it with a response message, e.g.\r\n\r\n```js\r\nres('Cool')\r\n```\r\n\r\n### Multi-event listeners\r\n\r\nYou may listen for any number of events very simply:\r\n\r\n```js\r\nmodule.exports = function(hook) {\r\n    hook('.google', 'names', 'part', function(ev, res) {\r\n        res('Interesting theory');\r\n    });\r\n};\r\n```\r\n\r\n### Default command prefixes\r\n\r\nDefault pr0kbot modules are prefixed with the character `.`. These modules do not break when you modify the command prefix, because the event listeners are mapped appropriately to the current command prefix. In summary: The default modules will always work, even if you change command prefix.\r\n\r\n## Modules\r\n\r\npr0kbot automatically loads modules from the `/modules` directory. Modules can also be loaded or unloaded using `load` and `unload` methods. An included module (**See**: [master](https://github.com/Ond/pr0kbot/blob/master/modules/master.js)) registers the commands `.unload` and `.load` for the bot master. This way you can add or remove modules without restarting the bot.\r\n\r\n```js\r\nmodule.exports = function(hook) {\r\n    hook('event1', function(ev, res) {\r\n        /* handle event */\r\n    })\r\n    hook('event2', function(ev, res) {\r\n        /* handle event */\r\n    })\r\n}\r\n```\r\n\r\nSee [/modules](https://github.com/Ond/pr0kbot/tree/master/modules) for the default modules.\r\n\r\n## Module example\r\n\r\nSimply place your module in the `/modules` directory, or call the `bot.load(path)` function manually, somewhere in your code.\r\n\r\n### Basic message echoing\r\n\r\nThis bot echos everything said in a channel. I don't think you should deploy such a module.\r\n\r\n```js\r\nmodule.exports = {\r\n    'channel msg':function(ev, res) {\r\n        res(ev.val);\r\n    }\r\n}\r\n```\r\n\r\n### Referring to the bot within modules\r\n\r\nThe scope of the bot is applied to each module, so `this` is equivalent, within the module, to the bot itself.\r\n\r\n```js\r\nmodule.exports = function(hook) {\r\n    var config = this.config;\r\n    hook('channel msg', function(ev, res) {\r\n        if (ev.val.equals('What network is this?')) {\r\n            res(config.network);\r\n        };\r\n    });\r\n};\r\n```\r\n\r\n### Listening for commands\r\n\r\nHere is one way to do it:\r\n\r\n```js\r\nmodule.exports = function(hook) {\r\n    hook('channel msg', function(ev, res) {\r\n        if (ev.val.startsWith('.google ')) {\r\n            var query = ev.val.substring(8);\r\n            /* query google */\r\n        };\r\n    });\r\n}\r\n```\r\n\r\nBut pr0kbot allows you to listen for commands directly, and also parses useful command information.\r\n\r\n```js\r\nmodule.exports = function(hook) {\r\n    hook('.google', function(ev, res) {\r\n        var args = ev.cmd.argv;\r\n        /* query google with args array */\r\n    });\r\n};\r\n```\r\n\r\nYou can also customize the command prefix in `config.json`.\r\n\r\n## IRC output formatting\r\n\r\nUsing the `format` function you may output pretty much any style you'd want, and many styles you shouldn't want.\r\n\r\n### Module example\r\n\r\nConsider a module which echos command arguments, with added obnoxiousness:\r\n\r\n```js\r\nmodule.exports = function(hook) {\r\n    var colorify = function(ev, res) {\r\n        var args = ev.cmd.argv.join(' ');\r\n        var options = {\r\n            style:'bold',\r\n            foreground:'white',\r\n            background:'blue'\r\n        };\r\n        res(this.format(options, args));\r\n    }.bind(this);\r\n\r\n    hook('.colorify', colorify);\r\n};\r\n```\r\n\r\n## Future\r\n\r\n+ User statuses, general user tracking\r\n+ Use msgpack instead of json for pr0kdb, and maybe rethink the database commands\r\n+ More extensive privileges\r\n+ More modules\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}